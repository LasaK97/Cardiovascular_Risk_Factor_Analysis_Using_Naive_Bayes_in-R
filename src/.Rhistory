summary(best.model)
#coefficients
best.model$coefficients
#coefficients
coef(best.model)
#confidence interval
confint(fit1)
#confidence interval
confint(best.model)
## CIs using profiled log-likelihood
confint(best.model)
## CIs using standard errors (Wald CIs)
confint.default(best.model)
## CIs using standard errors (Wald CIs)
confint.default(best.model
## CIs using standard errors (Wald CIs)
confint.default(best.model)
---
title: "Cardiovascular Risk Factor"
setwd("E:/Programming/ML/projects/Cardiovascular_Risk_Factor_Logistic_Reg/src")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
#importing data
library(readr)
cardio.data <- read.csv('../data/data_cardiovascular_risk.csv')
head(cardio.data)
#column names
colnames(cardio.data)
#dimensions of the data
dim(cardio.data)
#structure of the dataset
str(cardio.data)
#missing values
library(mice)
miss.count <- function(x){
sort(colSums(is.na(x)), decreasing = TRUE )
}
miss.count(cardio.data)
md.pattern(cardio.data, rotate.names = TRUE, plot = TRUE)
#removing missing values
cardio.cleaned <- na.omit(cardio.data)
cardio.cleaned
miss.count(cardio.cleaned)
md.pattern(cardio.cleaned, rotate.names = TRUE, plot = TRUE)
#summary
summary(cardio.cleaned)
summary(cardio.cleaned$age)
library(ggplot2)
cardio.cleaned$TenYearCHD <- as.factor(cardio.cleaned$TenYearCHD)
# Age Distribution of All Patients
ggplot(cardio.cleaned, aes(x = age)) +
geom_histogram(aes(y = ..density..), bins = 30, color = "black", fill = "#00bfc4") +
geom_density(color = "red",size=1) +
labs(title = "Distribution of Patients in Ages",
x = "Age") +
theme_bw()
#ggsave("../outputs/2.1.1.1_hist(age_dist).png",width = 6, height = 4)
#distribution of age
ggplot(cardio.cleaned, aes(x = age, fill = TenYearCHD)) +
geom_histogram(position = "fill", binwidth = 1) +
labs(title = "Proportion of Patients in Ages by CHD Risk",
x = "Age",
y = "Proportion of Smoking Patients")+
xlim(min(cardio.cleaned$age) + 1, max(cardio.cleaned$age) - 1)+
theme_bw()
#ggsave("../outputs/2.1.1.2_hist(age_by_chd).png",width = 6, height = 4)
cardio.cleaned$education <- as.factor(cardio.cleaned$education)
summary(cardio.cleaned$education)
#edu count
edu.counts <- table(cardio.cleaned$education)
edu.percentages <- prop.table(edu.counts) * 100
edu.data <- data.frame(
eduLvl = names(edu.counts),
count = as.numeric(edu.counts),
percentage = edu.percentages
)
#pie chart
ggplot(edu.data, aes(x = "", y = count, fill = eduLvl)) +
geom_bar(stat = "identity", color="black", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(percentage.Freq,2), " %")),
position = position_stack(vjust = 0.5)) +
labs(fill = "Eductation Level", title = "Proportion of Patients in Education Level") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
#ggsave("../outputs/2.1.2.1_pie(prop_edu).png",width = 6, height = 4)
cardio.cleaned$TenYearCHD <- as.factor(cardio.cleaned$TenYearCHD)
#barchart
ggplot(cardio.cleaned, aes(x = education, fill = TenYearCHD)) +
geom_bar(position = "fill", color = "black", width = 0.8) +
labs(x = "Education Level", y = "Proportion of CHD Risk Patients",
title = "Proportion of CHD Risk Patients by Education Level") +
theme_bw()
#ggsave("../outputs/2.1.2.2_hist(edu_CHD_Risk).png",width = 6, height = 4)
cardio.cleaned$sex <- as.factor(cardio.cleaned$sex)
summary(cardio.cleaned$sex)
#sex count
sex.counts <- table(cardio.cleaned$sex)
sex.percentages <- prop.table(sex.counts) * 100
sex.data <- data.frame(
sex = names(sex.counts),
count = as.numeric(sex.counts),
percentage = sex.percentages
)
#pie chart
ggplot(sex.data, aes(x = "", y = count, fill = sex)) +
geom_bar(stat = "identity", color="black", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(percentage.Freq,2), " %")),
position = position_stack(vjust = 0.5)) +
labs(fill = "Gender", title = "Distribution of Patients in Genders") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
#ggsave("../outputs/2.1.3.1_pie(prop_gen).png",width = 6, height = 4)
#barchart
ggplot(cardio.cleaned, aes(x = sex, fill = TenYearCHD)) +
geom_bar(position = "fill", color = "black", width = 0.8) +
labs(x = "Gender", y = "Proportion of CHD Risk Patients",
title = "Proportion of CHD Risk Patients by Genders") +
theme_bw()
#ggsave("../outputs/2.1.3.2_hist(gen_CHD_Risk).png",width = 6, height = 4)
library(dplyr)
#Smoking by gender
df_counts <- cardio.cleaned %>%
group_by(sex,is_smoking ) %>%
summarise(count = n()) %>%
ungroup() %>%
mutate(total = sum(count),
percentage = count / total)
cardio.cleaned$is_smoking<- as.factor(cardio.cleaned$is_smoking)
#Smoking by Gender
ggplot(df_counts, aes(x = sex, y = count, fill = is_smoking)) +
geom_bar(stat = "identity") +
labs(title = "Number of Smoking Patients by Gender",
x = "Gender",
y = "Count") +
scale_fill_discrete(name = "is_smoking") +
theme_bw()
#ggsave("../outputs/2.2.1.1_hist(smoking_by_gender).png",width = 6, height = 4)
#smoking by age
ggplot(cardio.cleaned, aes(x = age, fill = is_smoking)) +
geom_histogram(position = "fill", binwidth = 1) +
labs(title = "Proportion of Smoking Patients by Ages",
x = "Age",
y = "Proportion of Smoking Patients")+
xlim(min(cardio.cleaned$age) + 1, max(cardio.cleaned$age) - 1)+
theme_bw()
ggsave("../outputs/2.2.1.2_hist(smoking_by_age).png",width = 6, height = 4)
#barchart
ggplot(cardio.cleaned, aes(x = is_smoking, fill = TenYearCHD)) +
geom_bar(position = "fill", color = "black", width = 0.8) +
labs(x = "is_smoking", y = "Proportion of CHD Risk Patients",
title = "Proportion of CHD Risk Ptatients by Smoking") +
theme_bw()
#ggsave("../outputs/2.2.1.3_hist(smoking_CHD_Risk).png",width = 6, height = 4)
#cigs perday
ggplot(cardio.cleaned, aes(x = cigsPerDay)) +
geom_histogram(fill="#00c1c3",color="black") +
labs(x = "Cigarettes Per Day", y= "Count", title = "Distribution of Daily Cigarettes Consumption") +
theme_bw()
#ggsave("../outputs/2.2.2_hist(cigg_consum).png",width = 6, height = 4)
cardio.cleaned$BPMeds <- as.factor(cardio.cleaned$BPMeds)
summary(cardio.cleaned$BPMeds)
#BPMeds count
BPM.counts <- table(cardio.cleaned$BPMeds)
BPM.percentages <- prop.table(BPM.counts) * 100
BPM.data <- data.frame(
BPM = names(BPM.counts),
count = as.numeric(BPM.counts),
percentage = BPM.percentages
)
#pie chart
ggplot(BPM.data, aes(x = "", y = count, fill = BPM)) +
geom_bar(stat = "identity", color="black", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(percentage.Freq,2), " %")),
position = position_stack(vjust = 0.5)) +
labs(fill = "BPM", title = "Proportion of Patients on BPMeds") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
#ggsave("../outputs/2.3.1.1_pie(prop_bpm).png",width = 6, height = 4)
#barchart
ggplot(cardio.cleaned, aes(x = BPMeds, fill = TenYearCHD)) +
geom_bar(position = "fill", color = "black", width = 0.8) +
labs(x = "BPMeds", y = "Proportion of CHD Risk Patients",
title = "Proportion of CHD Risk by BPMeds") +
theme_bw()
ggsave("../outputs/2.3.1.2_hist(bpm_CHD_Risk).png",width = 6, height = 4)
cardio.cleaned$prevalentStroke <- as.factor(cardio.cleaned$prevalentStroke)
summary(cardio.cleaned$prevalentStroke)
#prevalentStroke count
stroke.counts <- table(cardio.cleaned$prevalentStroke)
stroke.percentages <- prop.table(stroke.counts) * 100
stroke.data <- data.frame(
stroke = names(stroke.counts),
count = as.numeric(stroke.counts),
percentage = stroke.percentages
)
#pie chart
ggplot(stroke.data, aes(x = "", y = count, fill = stroke)) +
geom_bar(stat = "identity", color="black", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(percentage.Freq,2), " %")),
position = position_stack(vjust = 0.5)) +
labs(fill = "Prevalent Stroke", title = "Proportion of Patients with Prevalent Stroke") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
#ggsave("../outputs/2.3.2.1_pie(prop_stroke).png",width = 6, height = 4)
#barchart
ggplot(cardio.cleaned, aes(x = prevalentStroke, fill = TenYearCHD)) +
geom_bar(position = "fill", color = "black", width = 0.8) +
labs(x = "prevalent Stroke", y = "Proportion of CHD Risk Patients",
title = "Proportion of CHD Risk by prevalent Stroke") +
theme_bw()
#ggsave("../outputs/2.3.2.2_hist(stroke_CHD_Risk).png",width = 6, height = 4)
cardio.cleaned$prevalentHyp <- as.factor(cardio.cleaned$prevalentHyp)
summary(cardio.cleaned$prevalentHyp)
#prevalentHyp count
hyp.counts <- table(cardio.cleaned$prevalentHyp)
hyp.percentages <- prop.table(hyp.counts) * 100
hyp.data <- data.frame(
hyp = names(hyp.counts),
count = as.numeric(hyp.counts),
percentage = hyp.percentages
)
#pie chart
ggplot(hyp.data, aes(x = "", y = count, fill = hyp)) +
geom_bar(stat = "identity", color="black", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(percentage.Freq,2), " %")),
position = position_stack(vjust = 0.5)) +
labs(fill = "Prevalent Hypertension", title = "Proportion of Patients with Prevalent Hypertension") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
#ggsave("../outputs/2.3.3.1_pie(prop_hyp).png",width = 6, height = 4)
#barchart
ggplot(cardio.cleaned, aes(x = prevalentHyp, fill = TenYearCHD)) +
geom_bar(position = "fill", color = "black", width = 0.8) +
labs(x = "prevalent Hypertension", y = "Proportion of CHD Risk Patients",
title = "Proportion of CHD Risk by prevalent Hypertension") +
theme_bw()
#ggsave("../outputs/2.3.3.2_hist(hyp_CHD_Risk).png",width = 6, height = 4)
cardio.cleaned$diabetes <- as.factor(cardio.cleaned$diabetes)
summary(cardio.cleaned$diabetes)
#diabetes count
diabetes.counts <- table(cardio.cleaned$diabetes)
diabetes.percentages <- prop.table(diabetes.counts) * 100
diabetes.data <- data.frame(
diabetes = names(diabetes.counts),
count = as.numeric(diabetes.counts),
percentage = diabetes.percentages
)
#pie chart
ggplot(diabetes.data, aes(x = "", y = count, fill = diabetes)) +
geom_bar(stat = "identity", color="black", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(percentage.Freq,2), " %")),
position = position_stack(vjust = 0.5)) +
labs(fill = "Diabetes", title = "Proportion of Patients with Diabetes") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
#ggsave("../outputs/2.3.4.1_pie(prop_diabetes).png",width = 6, height = 4)
#barchart
ggplot(cardio.cleaned, aes(x = diabetes, fill = TenYearCHD)) +
geom_bar(position = "fill", color = "black", width = 0.8) +
labs(x = "Diabetes", y = "Proportion of CHD Risk Patients",
title = "Proportion of CHD Risk by Diabetes") +
theme_bw()
#ggsave("../outputs/2.3.4.2_hist(diabetes_CHD_Risk).png",width = 6, height = 4)
tot.chol <- cardio.cleaned %>%
mutate(Chol_Category = case_when(
totChol < 200 ~ "Healthy",
totChol >= 200 & totChol < 240 ~ "At risk",
totChol >= 240 ~ "Dangerous"
))
#total chol dist
ggplot(tot.chol, aes(x = totChol, fill = Chol_Category)) +
geom_histogram(position = "stack", bins = 100, color = "black", alpha = 0.8) +
labs(title = "Total Cholesterol Distribution by Cholesterol Level",
x = "Total Cholesterol(mg/dl)",
y = "Count") +
theme_bw()
#ggsave("../outputs/2.4.1.1_hist(chol_dist).png",width = 6, height = 4)
# CHD Rate by Chol Category
ggplot(tot.chol, aes(x = Chol_Category, y = TenYearCHD, fill = Chol_Category)) +
geom_bar(stat = "identity") +
labs(title = "CHD Rate by Cholesterol Category",
x = "",
y = "CHD Rate") +
theme_bw()
#ggsave("../outputs/2.4.1.2_bar(chol_chd).png",width = 6, height = 4)
str(cardio.cleaned)
bp <- cardio.cleaned %>%
mutate(BP_Category = case_when(
sysBP < 120 & diaBP < 80 ~ "Normal",
sysBP >= 120 & sysBP < 130 & diaBP < 80 ~ "Elevated",
sysBP >= 130 | diaBP >= 80 ~ "Hypertension"
))
ggplot(data = bp, aes(x = sysBP, y = diaBP, color = BP_Category)) +
geom_point() +
labs(title = "Scatter Plot of Blood Pressure Levels",
x = "Systolic BP",
y = "Diastolic BP") +
theme_bw()
#ggsave("../outputs/2.4.2_scatter(bp_lvl).png",width = 6, height = 4)
bmi <- cardio.cleaned %>%
mutate(BMI_Category = case_when(
BMI < 18.5 ~ "Underweight",
BMI >= 18.5 & BMI < 25 ~ "Healthy",
BMI >= 25 & BMI < 30 ~ "Overweight",
BMI >= 30 ~ "Obesity",
))
# bmi dist
ggplot(data = bmi, aes(x = BMI, fill = BMI_Category)) +
geom_histogram(position = "stack", color = "black", bins = 100) +
labs(title = "Distribution of BMI by Weight Status",
x = "BMI Index",
y = "Count") +
theme_minimal()
#ggsave("../outputs/2.4.3.1_hist(bmi_by_weight).png",width = 6, height = 4)
#heart rate dist
ggplot(cardio.cleaned, aes(x = heartRate)) +
geom_histogram(aes(y = ..density..), bins = 50, color = "black", fill = "#00bfc4") +
geom_density(color = "red",size=1) +
labs(title = "Heart Rate Distribution of Patients",
x = "Heart Rate") +
theme_bw()
#ggsave("../outputs/2.4.4_hist(hr_dist).png",width = 6, height = 4)
cardio.cleaned$Glucose_Category <- cut(cardio.cleaned$glucose,
breaks = c(0, 70, 100, 126, Inf),
labels = c("Hypoglycemia", "Normal", "At risk", "Diabetes"),right = FALSE)
Glucose_Counts <- table(cardio.cleaned$Glucose_Category)
Glucose_Data <- data.frame(Glucose_Category = names(Glucose_Counts),
Count = as.numeric(Glucose_Counts))
# Glucose Distribution by Category
ggplot(data = Glucose_Data, aes(x = Glucose_Category, y = Count, fill = Glucose_Category)) +
geom_bar(stat = "identity", color = "black") +
labs(title = "Glucose Distribution by Category",
x = "Glucose Category",
y = "Count") +
theme_minimal()
#ggsave("../outputs/2.4.5_hist(hr_dist).png",width = 6, height = 4)
#numerical variables
numeric_vars <- select_if(cardio.cleaned, is.numeric)
# Compute the correlation matrix
cor_matrix <- cor(numeric_vars)
cor_matrix
cor_data <- reshape2::melt(cor_matrix)
cor_data
# correlation heatmap
ggplot(cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
scale_fill_gradient2(low = "#00c1c3", high = "#ff716f", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation")+
labs(x = NULL, y = NULL, title = "Correlation Matrix") +
theme_bw()
str(cardio.cleaned)
#remove 'id' , 'Glucose_Category' columns
cardio.df <- subset(cardio.cleaned, select = -c(id,Glucose_Category))
str(cardio.df)
#var to encoded
var.2.encode <- subset(cardio.df, select = c(education, sex, is_smoking,
BPMeds, prevalentStroke, prevalentHyp,
diabetes))
#one-hot encoding
encoded.variables <- model.matrix(~ . - 1, data = var.2.encode)
head(encoded.variables)
#combining df
cardio.df1 <- cbind(cardio.df$age, cardio.df$cigsPerDay, cardio.df$totChol, cardio.df$sysBP, cardio.df$diaBP, cardio.df$BMI, cardio.df$heartRate, cardio.df$glucose, cardio.cleaned$TenYearCHD)
colnames(cardio.df1) <- c('age','cigsPerDay', 'totChol', 'sysBP', 'diaBP', 'BMI',
'heartRate', 'glucose', 'TenYearCHD')
encoded.df <- cbind(encoded.variables,cardio.df1)
encoded.df <- as.data.frame(encoded.df)
encoded.df$TenYearCHD <- ifelse(encoded.df$TenYearCHD == 1, 0, 1)
# model with all the variables
full.model <- glm(formula = TenYearCHD ~ . , family = binomial, data = encoded.df)
summary(full.model)
#Backward elimination and AIC
step(full.model, criteria="AIC",direction = "backward")
#fitting the best model
best.model <- glm(TenYearCHD ~ sexM + prevalentStroke1 + age + cigsPerDay +
totChol + sysBP + glucose, family = binomial, data = encoded.df )
summary(best.model)
#coefficients
coef(best.model)
## CIs using profiled log-likelihood
confint(best.model)
## CIs using standard errors (Wald CIs)
confint.default(best.model)
#control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
library(mlbench)
install.packages("mlbench")
library(mlbench)
#control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
library(mlbench)
#control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
library(caret)
library(mlbench)
#control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
#Train the logistic regression model using cross-validation
model <- train(TenYearCHD ~ ., data = encoded.df, method = "glm", family = "binomial",trControl = control)
# Print the accuracy of the model
print(model$results$Accuracy)
library(caret)
library(mlbench)
#control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
#Train the logistic regression model using cross-validation
model <- train(TenYearCHD ~ ., data = encoded.df, method = "glm", family = "binomial",trControl = control)
# Print the accuracy of the model
model$results$Accuracy
library(caret)
library(mlbench)
#control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
#Train the logistic regression model using cross-validation
model <- train(TenYearCHD ~ ., data = encoded.df, method = "glm", family = "binomial",trControl = control)
# Print the accuracy of the model
model$results$Accuracy
library(caret)
library(mlbench)
# Define the control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
# Train the logistic regression model using cross-validation
cv_model <- train(Class ~ ., data = encoded.df, method = "glm", family = "binomial",
trControl = control, preProcess = c("center", "scale"))
library(caret)
library(mlbench)
# Define the control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
# Train the logistic regression model using cross-validation
cv_model <- train(TenYearCHD ~ ., data = encoded.df, method = "glm", family = "binomial",
trControl = control, preProcess = c("center", "scale"))
# Print the accuracy of the cross-validated model
print(cv_model$results$Accuracy)y
library(caret)
library(mlbench)
# Define the control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
# Train the logistic regression model using cross-validation
cv_model <- train(TenYearCHD ~ ., data = encoded.df, method = "glm", family = "binomial",
trControl = control, preProcess = c("center", "scale"))
# Print the accuracy of the cross-validated model
print(cv_model$results$Accuracy)
library(caret)
library(mlbench)
# Define the control parameters for cross-validation
control <- trainControl(method = "cv", number = 10)
# Train the logistic regression model using cross-validation
cv_model <- train(TenYearCHD ~ ., data = encoded.df, method = "glm", family = "binomial",
trControl = control, preProcess = c("center", "scale"))
# Print the accuracy of the cross-validated model
cv_model$results$Accuracy
#split dataset in to train and test
# Split the dataset into training and testing sets
set.seed(123)
train_indices <- createDataPartition(data$TenYearCHD, p = 0.8, list = FALSE)
#split dataset in to train and test
# Split the dataset into training and testing sets
set.seed(123)
train_indices <- createDataPartition(encoded.df$TenYearCHD, p = 0.8, list = FALSE)
train <- data[train_indices, ]
#split dataset in to train and test
# Split the dataset into training and testing sets
set.seed(123)
train_indices <- createDataPartition(encoded.df$TenYearCHD, p = 0.8, list = FALSE)
train <- encoded.df[train_indices, ]
test <- encoded.df[-train_indices, ]
{r}
#split dataset in to train and test
set.seed(123)
train_indices <- createDataPartition(encoded.df$TenYearCHD, p = 0.8, list = FALSE)
train <- encoded.df[train_indices, ]
test <- encoded.df[-train_indices, ]
#predictions
pred <- predict(best.model, newdata = test, type = "response")
# Convert predicted probabilities to class labels
predicted_classes <- ifelse(pred > 0.5, "1", "0")
# Evaluate the model performance
confusion_matrix <- table(predicted_classes, test_data$target_variable)
# Evaluate the model performance
confusion_matrix <- table(predicted_classes, test$target_variable)
# Evaluate the model performance
confusion_matrix <- table(predicted_classes, test$target_variable)
# Evaluate the model performance
confusion_matrix <- table(predicted_classes, test$TenYearCHD)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(confusion_matrix)
print(paste("Accuracy:", accuracy))
